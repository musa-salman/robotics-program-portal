rules_version = '2';

// Craft rules based on data in your Firestore database
// allow write: if firestore.get(
//    /databases/(default)/documents/users/$(request.auth.uid)).data.isAdmin;
service firebase.storage {
  match /b/{bucket}/o {
    // owner = 1
    // admin = 2
    // student = 3
    function isHasRole(roles) {
      let userDoc = firestore.get(/databases/(default)/documents/users/$(request.auth.uid));
      return userDoc != null && roles.hasAny(userDoc.data.roles);
    }

    match /documents/{documentId}/students/{studentId} {
      allow get: if request.auth != null && (request.auth.uid == studentId || isHasRole([1, 2]));
      allow read: if request.auth != null && (request.auth.uid == studentId || isHasRole([1, 2]));
      allow write: if request.auth != null && (request.auth.uid == studentId || isHasRole([1, 2]));
    }
    
    match /documents/{documentId}/document {
      allow get: if request.auth != null && isHasRole([1, 2, 3]);
      allow write: if request.auth != null && isHasRole([1, 2]);
    }

    match /documents/{documentId} {
      allow get: if request.auth != null && isHasRole([1, 2, 3]);
      allow read: if request.auth != null && isHasRole([1, 2, 3]);
      allow write: if request.auth != null && isHasRole([1, 2]);
    }

    match /event-img/{eventId} {
      allow read: if request.auth != null && isHasRole([1, 2, 3]);
      allow write: if request.auth != null && isHasRole([1, 2]);
    }

    match /study-material/{studyMaterialId} {
      allow get: if request.auth != null && isHasRole([1, 2, 3]);
      allow read: if request.auth != null && isHasRole([1, 2, 3]);
      allow write: if request.auth != null && isHasRole([1, 2]);
    }
  }
}
