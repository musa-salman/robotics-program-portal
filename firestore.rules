rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  		// owner = 1
  		// admin = 2
  		// student = 3
      function isHasRole(roles) {
        let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
        return userDoc != null && roles.hasAny(userDoc.data.roles);
      }
      
      match /users/{userId} {
        allow list: if request.auth != null && isHasRole([1, 2]);
        allow read: if request.auth != null && (request.auth.uid == userId || isHasRole([1, 2]));
        allow create: if request.auth != null && (request.auth.uid == userId && request.resource.data.roles == [5] || isHasRole([1, 2]));
        allow update: if request.auth != null && (request.auth.uid == userId && resource.data.roles == [5] && request.resource.data.roles == [4] || isHasRole([1, 2]));
        allow delete: if request.auth != null && isHasRole([1, 2]);
      }

      match /studyMaterials/{studyMaterialId} {
        allow list: if request.auth != null && (isHasRole([1, 2, 3]));
        allow read: if request.auth != null && (isHasRole([1, 2, 3]));
        allow write: if request.auth != null && isHasRole([1, 2]);
      }

      match /categories/{categoryId} {
        allow list: if request.auth != null && (isHasRole([1, 2, 3]));
        allow read: if request.auth != null && (isHasRole([1, 2, 3]));
        allow write: if request.auth != null && isHasRole([1, 2]);
      }

      match /events/{eventId} {
        allow list: if request.auth != null && (isHasRole([1, 2, 3]));
        allow read: if request.auth != null && (isHasRole([1, 2, 3]));
        allow write: if request.auth != null && isHasRole([1, 2]);
      }

      match /events/{eventId}/participants/{participantId} {
        allow list: if request.auth != null && (request.auth.uid == participantId || isHasRole([1, 2]));
        allow read: if request.auth != null && (request.auth.uid == participantId || isHasRole([1, 2]));
        allow write: if request.auth != null && isHasRole([1, 2]);
      }

      match /students/{studentId} {
        allow list: if request.auth != null && (isHasRole([1, 2]));
        allow read: if request.auth != null && (request.auth.uid == studentId || isHasRole([1, 2]));
        allow write: if request.auth != null && isHasRole([1, 2]);
      }

      match /students/{studentId}/events/{eventId} {
        allow read: if request.auth != null && (request.auth.uid == studentId || isHasRole([1, 2]));
        allow create: if request.auth != null && (request.auth.uid == studentId || isHasRole([1, 2]));
        allow delete, update: if request.auth != null && isHasRole([1, 2]);
      }

      match /registers/{registerId} {
        allow read: if request.auth != null && isHasRole([1, 2]);
        allow create: if request.auth != null && isHasRole([1, 2, 3]);
      }
  }
}